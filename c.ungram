// C Un-Grammar.
//
// This grammar specifies the structure of C's concrete syntax tree.
// It does not specify parsing rules (ambiguities, precedence, etc are out of scope).
// Tokens are processed -- contextual keywords are recognised, compound operators glued.
//
// Legend:
//
//   //          -- comment
//   Name =      -- non-terminal definition
//   'ident'     -- token (terminal)
//   A B         -- sequence
//   A | B       -- alternation
//   A*          -- zero or more repetition
//   A?          -- zero or one repetition
//   (A)         -- same as A
//   label:A     -- suggested name for field of AST node

TranslationUnit = TopLevelDeclaration*;

TopLevelDeclaration =
  | FunctionDefinition
  | Declaration
  | PreprocessorDirective
  | ';'
  ;

FunctionDefinition =
    | DeclarationSpecifiers Declarator CompoundStatement
    | DeclarationSpecifiers Declarator ';'
    ;

Declaration =
    | DeclarationSpecifiers InitDeclaratorList ';'
    | DeclarationSpecifiers ';'
    ;

DeclarationSpecifiers =
    | StorageClassSpecifier DeclarationSpecifiers?
    | TypeSpecifier DeclarationSpecifiers?
    | TypeQualifier DeclarationSpecifiers?
    | FunctionSpecifier DeclarationSpecifiers?
    | AlignmentSpecifier DeclarationSpecifiers?
    ;

StorageClassSpecifier =
    | 'typedef'
    | 'extern'
    | 'static'
    | '_Thread_local'
    | 'auto'
    | 'register'
    ;

TypeSpecifier =
    | 'void'
    | 'char'
    | 'short'
    | 'int'
    | 'long'
    | 'float'
    | 'double'
    | 'signed'
    | 'unsigned'
    | '_Bool'
    | '_Complex'
    | StructOrUnionSpecifier
    | EnumSpecifier
    | TypedefName
    ;

StructOrUnionSpecifier =
    | StructOrUnion Identifier? '{' StructDeclarationList '}'
    | StructOrUnion Identifier
    ;

StructOrUnion =
    | 'struct'
    | 'union'
    ;

StructDeclarationList =
    | StructDeclaration StructDeclarationList?
    ;

StructDeclaration =
    | SpecifierQualifierList StructDeclaratorList ';'
    ;

SpecifierQualifierList =
    | TypeSpecifier SpecifierQualifierList?
    | TypeQualifier SpecifierQualifierList?
    ;

StructDeclaratorList =
    | StructDeclarator StructDeclaratorList?
    ;

StructDeclarator =
    | Declarator
    | ':' ConstantExpression
    | Declarator ':' ConstantExpression
    ;

EnumSpecifier =
    | 'enum' Identifier? '{' EnumeratorList '}'
    | 'enum' Identifier
    ;

EnumeratorList =
    | Enumerator EnumeratorList?
    ;

Enumerator =
    | EnumerationConstant
    | EnumerationConstant '=' ConstantExpression
    ;

TypeQualifier =
    | 'const'
    | 'restrict'
    | 'volatile'
    | '_Atomic'
    ;

FunctionSpecifier =
    | 'inline'
    | '_Noreturn'
    ;

AlignmentSpecifier =
    | '_Alignas' '(' TypeSpecifier ')'
    | '_Alignas' '(' ConstantExpression ')'
    ;

Declarator =
    | Pointer? DirectDeclarator
    ;

DirectDeclarator =
    | Identifier
    | '(' Declarator ')'
    | DirectDeclarator '[' TypeQualifierList? AssignmentExpression? ']'
    | DirectDeclarator '[' 'static' TypeQualifierList? AssignmentExpression ']'
    | DirectDeclarator '[' TypeQualifierList 'static' AssignmentExpression ']'
    | DirectDeclarator '[' TypeQualifierList? '*' ']'
    | DirectDeclarator '(' ParameterTypeList ')'
    | DirectDeclarator '(' IdentifierList? ')'
    ;

Pointer =
    | '*' TypeQualifierList? Pointer?
    ;

TypeQualifierList =
    | TypeQualifier TypeQualifierList?
    ;

ParameterTypeList =
    | ParameterList ',' '...'
    | ParameterList
    | '...'
    ;

ParameterList =
    | ParameterDeclaration
    | ParameterList ',' ParameterDeclaration
    ;

ParameterDeclaration =
    | DeclarationSpecifiers Declarator
    | DeclarationSpecifiers AbstractDeclarator?
    ;

IdentifierList =
    | Identifier
    | IdentifierList ',' Identifier
    ;

TypeName =
    | SpecifierQualifierList AbstractDeclarator?
    ;

AbstractDeclarator =
    | Pointer
    | Pointer? DirectAbstractDeclarator
    ;

DirectAbstractDeclarator =
    | '(' AbstractDeclarator ')'
    | '[' ']'
    | '[' TypeQualifierList? AssignmentExpression? ']'
    | '[' 'static' TypeQualifierList? AssignmentExpression ']'
    | '[' TypeQualifierList 'static' AssignmentExpression ']'
    | '[' TypeQualifierList? '*' ']'
    | '(' ParameterTypeList ')'
    | DirectAbstractDeclarator '[' ']'
    | DirectAbstractDeclarator '[' TypeQualifierList? AssignmentExpression? ']'
    | DirectAbstractDeclarator '[' 'static' TypeQualifierList? AssignmentExpression ']'
    | DirectAbstractDeclarator '[' TypeQualifierList 'static' AssignmentExpression ']'
    | DirectAbstractDeclarator '[' TypeQualifierList? '*' ']'
    | DirectAbstractDeclarator '(' ')'
    | DirectAbstractDeclarator '(' ParameterTypeList ')'
    ;

Initializer =
    | AssignmentExpression
    | '{' InitializerList '}'
    | '{' InitializerList ',' '}'
    ;

InitializerList =
    | Designation? Initializer
    | InitializerList ',' Designation? Initializer
    ;

Designation =
    | DesignatorList '='
    ;

DesignatorList =
    | Designator DesignatorList?
    ;

Designator =
    | '[' ConstantExpression ']'
    | '.' Identifier
    ;

StaticAssertDeclaration =
    | '_Static_assert' '(' ConstantExpression ',' StringLiteral ')' ';'
    ;

Statement =
    | LabeledStatement
    | CompoundStatement
    | ExpressionStatement
    | SelectionStatement
    | IterationStatement
    | JumpStatement
    ;

LabeledStatement =
    | Identifier ':' Statement
    | 'case' ConstantExpression ':' Statement
    | 'default' ':' Statement
    ;

CompoundStatement =
    | '{' BlockItemList? '}'
    ;

BlockItemList =
    | BlockItem BlockItemList?
    ;

BlockItem =
    | Declaration
    | Statement
    ;

ExpressionStatement =
    | Expression? ';'
    ;

SelectionStatement =
    | 'if' '(' Expression ')' Statement
    | 'if' '(' Expression ')' Statement 'else' Statement
    | 'switch' '(' Expression ')' Statement
    ;

IterationStatement =
    | 'while' '(' Expression ')' Statement
    | 'do' Statement 'while' '(' Expression ')' ';'
    | 'for' '(' Expression? ';' Expression? ';' Expression? ')' Statement
    | 'for' '(' Declaration Expression? ';' Expression? ')' Statement
    ;

JumpStatement =
    | 'goto' Identifier ';'
    | 'continue' ';'
    | 'break' ';'
    | 'return' Expression? ';'
    ;

Expression =
    | AssignmentExpression
    | Expression ',' AssignmentExpression
    ;

AssignmentExpression =
    | ConditionalExpression
    | UnaryExpression AssignmentOperator AssignmentExpression
    ;

AssignmentOperator =
    | '='
    | '*='
    | '/='
    | '%='
    | '+='
    | '-='
    | '<<='
    | '>>='
    | '&='
    | '^='
    | '|='
    ;

ConditionalExpression =
    | LogicalOrExpression
    | LogicalOrExpression '?' Expression ':' ConditionalExpression
    ;

ConstantExpression =
    | ConditionalExpression
    ;

LogicalOrExpression =
    | LogicalAndExpression
    | LogicalOrExpression '||' LogicalAndExpression
    ;

LogicalAndExpression =
    | InclusiveOrExpression
    | LogicalAndExpression '&&' InclusiveOrExpression
    ;

InclusiveOrExpression =
    | ExclusiveOrExpression
    | InclusiveOrExpression '|' ExclusiveOrExpression
    ;

ExclusiveOrExpression =
    | AndExpression
    | ExclusiveOrExpression '^' AndExpression
    ;

AndExpression =
    | EqualityExpression
    | AndExpression '&' EqualityExpression
    ;

EqualityExpression =
    | RelationalExpression
    | EqualityExpression '==' RelationalExpression
    | EqualityExpression '!=' RelationalExpression
    ;

RelationalExpression =
    | ShiftExpression
    | RelationalExpression '<' ShiftExpression
    | RelationalExpression '>' ShiftExpression
    | RelationalExpression '<=' ShiftExpression
    | RelationalExpression '>=' ShiftExpression
    ;

ShiftExpression =
    | AdditiveExpression
    | ShiftExpression '<<' AdditiveExpression
    | ShiftExpression '>>' AdditiveExpression
    ;

AdditiveExpression =
    | MultiplicativeExpression
    | AdditiveExpression '+' MultiplicativeExpression
    | AdditiveExpression '-' MultiplicativeExpression
    ;

MultiplicativeExpression =
    | CastExpression
    | MultiplicativeExpression '*' CastExpression
    | MultiplicativeExpression '/' CastExpression
    | MultiplicativeExpression '%' CastExpression
    ;

CastExpression =
    | UnaryExpression
    | '(' TypeName ')' CastExpression
    ;

UnaryExpression =
    | PostfixExpression
    | '++' UnaryExpression
    | '--' UnaryExpression
    | UnaryOperator CastExpression
    | 'sizeof' UnaryExpression
    | 'sizeof' '(' TypeName ')'
    ;

UnaryOperator =
    | '&'
    | '*'
    | '+'
    | '-'
    | '~'
    | '!'
    ;

PostfixExpression =
    | PrimaryExpression
    | PostfixExpression '[' Expression ']'
    | PostfixExpression '(' ArgumentExpressionList? ')'
    | PostfixExpression '.' Identifier
    | PostfixExpression '->' Identifier
    | PostfixExpression '++'
    | PostfixExpression '--'
    | '(' TypeName ')' '{' InitializerList '}'
    | '(' TypeName ')' '{' InitializerList ',' '}'
    ;

ArgumentExpressionList =
    | AssignmentExpression
    | ArgumentExpressionList ',' AssignmentExpression
    ;

PrimaryExpression =
    | Identifier
    | Constant
    | StringLiteral
    | '(' Expression ')'
    ;

Constant =
    | IntegerConstant
    | FloatingConstant
    | EnumerationConstant
    | CharacterConstant
    ;

IntegerConstant =
    | DecimalConstant IntegerSuffix?
    | OctalConstant IntegerSuffix?
    | HexadecimalConstant IntegerSuffix?
    ;

DecimalConstant =
    | NonzeroDigit
    | DecimalConstant Digit
    ;

OctalConstant =
    | '0'
    | OctalConstant OctalDigit
    ;

HexadecimalConstant =
    | HexadecimalPrefix HexadecimalDigit
    | HexadecimalConstant HexadecimalDigit
    ;

HexadecimalPrefix =
    | '0x'
    | '0X'
    ;

IntegerSuffix =
    | UnsignedSuffix LongSuffix?
    | UnsignedSuffix LongLongSuffix
    | LongSuffix UnsignedSuffix?
    | LongLongSuffix UnsignedSuffix?
    ;

UnsignedSuffix =
    | 'u'
    | 'U'
    ;

LongSuffix =
    | 'l'
    | 'L'
    ;

LongLongSuffix =
    | 'll'
    | 'LL'
    ;

FloatingConstant =
    | FractionalConstant ExponentPart? FloatingSuffix?
    | DigitSequence ExponentPart FloatingSuffix?
    ;

FractionalConstant =
    | DigitSequence? '.' DigitSequence
    | DigitSequence '.'
    ;

ExponentPart =
    | ExponentIndicator SignedDigitSequence
    ;

ExponentIndicator =
    | 'e'
    | 'E'
    ;

SignedDigitSequence =
    | Sign? DigitSequence
    ;

Sign =
    | '+'
    | '-'
    ;

DigitSequence =
    | Digit
    | DigitSequence Digit
    ;

FloatingSuffix =
    | 'f'
    | 'F'
    | 'l'
    | 'L'
    ;

EnumerationConstant =
    | Identifier
    ;

CharacterConstant =
    | 'L'? '\'' CCharSequence '\''
    | 'L'? 'u' '\'' CCharSequence '\''
    | 'L'? 'U' '\'' CCharSequence '\''
    | 'L'? 'u8' '\'' CCharSequence '\''
    ;

// CCharSequence =
//     | CChar
//     | CCharSequence CChar
//     ;

// CChar =
//     | EscapeSequence
//     | UniversalCharacterName
//     | AnyMemberOfSourceCharacterSetExceptSingleQuoteOrBackslash
//     ;

// StringLiteral =
//     | EncodingPrefix? '"' SCharSequence? '"'
//     | EncodingPrefix? 'u8' '"' SCharSequence? '"'
//     | EncodingPrefix? 'u' '"' SCharSequence? '"'
//     | EncodingPrefix? 'U' '"' SCharSequence? '"'
//     | EncodingPrefix? 'L' '"' SCharSequence? '"'
//     ;

// SCharSequence =