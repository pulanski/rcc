var searchIndex = JSON.parse(
    '{\
"rcc":{"doc":"","t":[7,7,7,7,7,7,7,7,7,7,7,7,7,7,14,0,0,14,5,0,5,5,5,0,0,0,13,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,13,4,13,13,13,13,13,13,13,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,17,17,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,7,7,7,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,13,13,13,13,13,13,13,13,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,6,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,13,13,13,3,4,3,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,5,5,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,13,17,4,17,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,3,3,13,17,3,3,17,5,11,5,11,11,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,5,11,11,11,5,5,5,11,11,5,5,5,5,5,5,11,11,5,5,5,11,11,5,11,12,5,11,11,5,5,5,11,11,5,11,11,11,11,11,12,5,5,5,5,12,12,5,5,5,5,11,11,11,11,11,5,5,5,5,11,5,5,5,12,11,11,11,11,11,5,5,5,11,5,12,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,11,12,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,12,13,13,3,13,4,11,11,11,11,11,11,11,11,11,11,11,0,11,12,11,11,12,11,5,11,11,5,11,11,11,11,11,11,11,11,11,17,13,3,13,3,4,13,13,13,13,4,13,13,13,13,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,5,12,12,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,11,5,12,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,18,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11],"n":["CALLSITE","CALLSITE","CALLSITE","CALLSITE","CALLSITE","CALLSITE","CALLSITE","META","META","META","META","META","META","META","TS","ast","cst","format_to","lex","lexer","main","parse","parse_tree","parser","preprocessor","token_set","AdditiveExpression","AlignmentSpecifier","AndExpression","Arg","ArgList","ArgumentExpressionList","AssignmentExpression","Block","CastExpression","Child","CompoundStatement","ConditionalExpression","ConstantExpression","Declaration","DeclarationList","DeclarationSpecifiers","Declarator","DirectAbstractDeclarator","DirectDeclarator","EnumSpecifier","Enumerator","EnumeratorList","EqualityExpression","ErrorTree","ExclusiveOrExpression","ExprBinary","ExprCall","ExprLiteral","ExprName","ExprParen","Expression","ExpressionStatement","ExternDecl","File","Fn","FunctionDef","FunctionSpecifier","IdentifierList","InclusiveOrExpression","InitDeclarator","InitDeclaratorList","Initializer","InitializerList","IterationStatement","JumpStatement","LabeledStatement","LogicalAndExpression","LogicalOrExpression","MultiplicativeExpression","Param","ParamList","ParameterDeclaration","ParameterList","Pointer","PostfixExpression","PrimaryExpression","RelationalExpression","SelectionStatement","ShiftExpression","SpecifierQualifierList","Statement","StatementList","StmtExpr","StmtLet","StmtReturn","StorageClassSpecifier","StructDeclaration","StructDeclarationList","StructDeclarator","StructDeclaratorList","StructOrUnionSpecifier","Token","TranslationUnit","Tree","Tree","TreeKind","TypeExpr","TypeName","TypeQualifier","TypeQualifierList","TypeSpecifier","UnaryExpression","UnaryOperator","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","children","fmt","fmt","fmt","fmt","fmt","from","from","from","into","into","into","kind","print","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","ALIGNAS_KW","ALIGNOF_KW","AMP","AMPEQ","AND_KW","ARGUMENT","ARGUMENTS","ASSIGN_STMT","ATOMIC_KW","AUTO_KW","BANG","BINARY_EXPR","BINOP","BIN_OP","BOOL_KW","BREAK_KW","BREAK_STMT","BYTES","CALL_SUFFIX","CARET","CARETEQ","CASE_KW","CHAR_KW","COLON","COMMA","COMMENT","COMPLEX_KW","COMP_CLAUSE","CONSTANT","CONST_KW","CONTINUE_KW","CONTINUE_STMT","DEC_OP","DEFAULT_KW","DEF_KW","DEF_STMT","DICT_COMP","DICT_EXPR","DOT","DOT_SUFFIX","DOUBLEAMP","DOUBLEPIPE","DOUBLE_KW","DO_KW","DSLASH","DSLASHEQ","DSTAR","ELIF_CLAUSES","ELIF_KW","ELLIPSIS","ELSE_CLAUSE","ELSE_KW","ENTRIES","ENTRY","ENUM_KW","EQ","EQEQ","EXPRESSION","EXPR_STMT","EXTERN_KW","FILE","FLOAT","FLOAT_KW","FOR_KW","FOR_STMT","GE","GENERIC_KW","GOTO_KW","GT","IDENTIFIER","IF_EXPR","IF_KW","IF_STMT","IMAGINARY_KW","INC_OP","INDENT","INLINE_KW","INT","INT_KW","IN_KW","LAMBDA_EXPR","LAMBDA_KW","LBRACE","LBRACKET","LE","LIST_COMP","LIST_EXPR","LOAD_KW","LOAD_STMT","LONG_KW","LOOP_VARIABLES","LPAREN","LSHIFT","LSHIFTEQ","LT","MINUS","MINUSEQ","NE","NEWLINE","NORETURN_KW","NOT_KW","OPERAND","OR_KW","OUTDENT","PARAMETER","PARAMETERS","PASS_KW","PASS_STMT","PERCENT","PERCENTEQ","PIPE","PIPEEQ","PLUS","PLUSEQ","PRIMARY_EXPR","PTR_OP","QUESTION","RBRACE","RBRACKET","REGISTER_KW","RESTRICT_KW","RETURN_KW","RETURN_STMT","RPAREN","RSHIFT","RSHIFTEQ","RUNE","SEMICOLON","SHORT_KW","SIGNED_KW","SIMPLE_STMT","SIZEOF_KW","SLASH","SLASHEQ","SLICE_SUFFIX","SMALL_STMT","STAR","STAREQ","STATEMENT","STATIC_ASSERT_KW","STATIC_KW","STRING","STRUCT_KW","SUITE","SWITCH_KW","SyntaxKind","TEST","THREAD_LOCAL_KW","TILDE","TYPEDEF_KW","UNARY_EXPR","UNION_KW","UNKNOWN","UNSIGNED_KW","VOID_KW","VOLATILE_KW","WHILE_KW","WHITESPACE","_IMPL_NUM_FromPrimitive_FOR_SyntaxKind","_IMPL_NUM_ToPrimitive_FOR_SyntaxKind","borrow","borrow_mut","clone","clone_into","cmp","eq","fmt","from","from_char","from_contextual_keyword","from_i64","from_keyword","from_u64","hash","into","is_keyword","is_literal","is_punct","partial_cmp","to_i64","to_owned","to_u64","try_from","try_into","type_id","ALIGNAS_KW","ALIGNOF_KW","AMP","AMPEQ","ATOMIC_KW","AUTO_KW","BANG","BOOL_KW","BREAK_KW","BYTES","CARET","CARETEQ","CASE_KW","CHAR_KW","COLON","COMMA","COMMENT","COMPACT_TABLE_0","COMPACT_TABLE_1","COMPACT_TABLE_2","COMPLEX_KW","CONSTANT","CONST_KW","CONTINUE_KW","DEC_OP","DEFAULT_KW","DOT","DOUBLEAMP","DOUBLEPIPE","DOUBLE_KW","DO_KW","DSLASH","DSLASHEQ","DSTAR","ELLIPSIS","ELSE_KW","ENUM_KW","EOF","EQ","EQEQ","EXTERN_KW","FLOAT_KW","FOR_KW","GE","GENERIC_KW","GOTO_KW","GT","IDENTIFIER","IF_KW","IMAGINARY_KW","INC_OP","INLINE_KW","INT_KW","J133","J133","J133","J133","J133","J133","J133","J133","J133","J133","J133","J133","J133","J133","J133","J133","J133","J133","J137","J143","J152","J164","J166","J167","J173","J174","J176","J176","J178","J178","J178","J178","J180","J180","J180","J184","J184","J186","J208","J210","J216","J220","J225","J227","J229","J231","J233","J237","J243","J245","J249","J25","J252","J254","J263","J267","J275","J277","J283","J284","J292","J303","J305","J316","J319","J322","J324","J330","J333","J338","J341","J345","J35","J352","J354","J356","J36","J361","J363","J375","J38","J384","J387","J391","J40","J400","J41","J410","J413","J418","J42","J428","J43","J431","J436","J439","J44","J441","J444","J45","J450","J456","J459","J46","J465","J47","J471","J472","J475","J48","J487","J488","J497","J503","J508","J509","J514","J519","J52","J524","J529","J534","J537","J539","J541","J64","J64","J8","J86","Jump","Jump","Jump","Jump","Jump","Jump","Jump","Jump","Jump","Jump","Jump","Jump","Jump","Jump","Jump","Jump","Jump","Jump","Jump","Jump","Jump","Jump","Jump","LBRACE","LBRACKET","LE","LONG_KW","LPAREN","LSHIFT","LSHIFTEQ","LT","LUT","LUT","LUT","LUT","LUT","LUT","LUT","LUT","LUT","LUT","LUT","LUT","LUT","LUT","LUT","LUT","LUT","LUT","LUT","LUT","LUT","LUT","LUT","LUT","LUT","LUT","Lexer","MINUS","MINUSEQ","NE","NEWLINE","NORETURN_KW","PERCENT","PERCENTEQ","PIPE","PIPEEQ","PLUS","PLUSEQ","PTR_OP","QUESTION","RBRACE","RBRACKET","REGISTER_KW","RESTRICT_KW","RETURN_KW","RPAREN","RSHIFT","RSHIFTEQ","SEMICOLON","SHORT_KW","SIGNED_KW","SIZEOF_KW","SLASH","SLASHEQ","STAR","STAREQ","STATIC_ASSERT_KW","STATIC_KW","STRING","STRUCT_KW","SWITCH_KW","Span","THREAD_LOCAL_KW","TILDE","TYPEDEF_KW","Token","TokenKind","TokenSink","TokenStream","UNION_KW","UNKNOWN","UNSIGNED_KW","VOID_KW","VOLATILE_KW","WHILE_KW","WHITESPACE","__","__","__","__","__","__","__","__","__","__","__","__","__","__","__","__","__","__","__","__","__","__","__","_end","_error","_fast_loop","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","builder","builder","builder","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cursor","cursor","cursor_mut","default","end","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get","goto100_ctx132_x","goto101_ctx132_x","goto102_ctx133_x","goto103_ctx132_x","goto104_ctx132_x","goto105_ctx132_x","goto106_ctx133_x","goto107_ctx133_x","goto108_ctx133_x","goto109_ctx133_x","goto10_ctx9_x","goto110_ctx132_x","goto111_ctx132_x","goto112_ctx132_x","goto113_ctx132_x","goto114_ctx132_x","goto115_ctx132_x","goto116_ctx133_x","goto117_ctx133_x","goto118_ctx133_x","goto119_ctx133_x","goto11_ctx11_x","goto120_ctx133_x","goto121_ctx133_x","goto122_ctx132_x","goto123_ctx132_x","goto124_ctx132_x","goto125_ctx132_x","goto126_ctx132_x","goto127_ctx132_x","goto128_ctx132_x","goto129_ctx132_x","goto12_ctx11_x","goto130_ctx132_x","goto131_ctx132_x","goto132_ctx132_x","goto132_ctx133_x","goto132_x","goto133_ctx132_x","goto135_ctx136_x","goto135_x","goto136_ctx136_x","goto136_x","goto137_ctx136_x","goto138_at1_ctx136_x","goto13_ctx13_x","goto143_ctx132_x","goto143_ctx151_x","goto143_x","goto14_ctx17_x","goto151_ctx151_x","goto151_x","goto152_ctx151_x","goto154_at1_ctx151_x","goto15_ctx18_x","goto160_ctx160_x","goto160_ctx4_x","goto161_ctx160_x","goto163_ctx163_x","goto164_ctx163_x","goto166_x","goto167_at1","goto16_ctx16_x","goto173_ctx55_x","goto174_ctx63_x","goto176_ctx55_x","goto178_ctx63_x","goto17_ctx17_x","goto180_at1_ctx55_x","goto180_at1_ctx63_x","goto184_ctx132_x","goto186_at1_ctx132_x","goto18_ctx18_x","goto19_ctx18_x","goto1_ctx1_x","goto208_ctx16_x","goto20_ctx17_x","goto210_ctx23_x","goto216_ctx3_x","goto21_ctx16_x","goto220_ctx4_x","goto222_ctx4_x","goto223_ctx4_x","goto225_ctx6_x","goto227_ctx9_x","goto229_ctx11_x","goto22_ctx23_x","goto231_ctx13_x","goto233_ctx17_x","goto235_ctx17_x","goto237_ctx18_x","goto239_ctx18_x","goto23_ctx23_x","goto243_ctx1_x","goto245_ctx2_x","goto249_ctx133_x","goto24_ctx1_x","goto250_ctx133_x","goto252_ctx132_x","goto254_ctx132_x","goto255_ctx132_x","goto258_ctx132_x","goto25_ctx2_x","goto263_ctx132_x","goto266_ctx132_x","goto267_ctx132_x","goto268_ctx132_x","goto26_ctx3_x","goto273_ctx132_x","goto275_ctx132_x","goto277_ctx132_x","goto27_ctx4_x","goto280_ctx132_x","goto283_ctx132_x","goto284_ctx132_x","goto285_ctx132_x","goto288_ctx132_x","goto28_ctx4_x","goto292_ctx132_x","goto294_ctx132_x","goto296_ctx132_x","goto298_ctx132_x","goto29_ctx6_x","goto2_ctx2_x","goto300_ctx132_x","goto303_ctx132_x","goto305_ctx132_x","goto307_ctx132_x","goto308_ctx132_x","goto30_ctx9_x","goto311_ctx132_x","goto316_ctx132_x","goto318_ctx132_x","goto319_ctx132_x","goto31_ctx11_x","goto320_ctx132_x","goto322_ctx132_x","goto324_ctx132_x","goto325_ctx132_x","goto328_ctx132_x","goto32_ctx13_x","goto330_ctx132_x","goto333_ctx132_x","goto335_ctx132_x","goto337_ctx132_x","goto338_ctx132_x","goto339_ctx132_x","goto33_ctx17_x","goto341_ctx133_x","goto342_ctx133_x","goto345_ctx132_x","goto34_ctx18_x","goto350_ctx132_x","goto352_ctx132_x","goto354_ctx132_x","goto356_ctx132_x","goto358_ctx132_x","goto35_x","goto360_ctx132_x","goto361_ctx132_x","goto363_ctx133_x","goto364_ctx133_x","goto367_ctx133_x","goto36_ctx2_x","goto375_ctx133_x","goto377_ctx133_x","goto379_ctx133_x","goto37_ctx1_x","goto381_ctx133_x","goto383_ctx133_x","goto384_ctx133_x","goto385_ctx133_x","goto387_ctx133_x","goto389_ctx133_x","goto38_ctx2_x","goto391_ctx133_x","goto392_ctx133_x","goto395_ctx132_x","goto39_ctx39_x","goto39_x","goto3_ctx3_x","goto400_ctx132_x","goto402_ctx132_x","goto404_ctx132_x","goto406_ctx132_x","goto40_x","goto410_ctx132_x","goto413_ctx132_x","goto415_ctx132_x","goto417_ctx132_x","goto418_ctx132_x","goto419_ctx132_x","goto41_x","goto424_ctx132_x","goto428_ctx132_x","goto42_x","goto431_ctx132_x","goto433_ctx132_x","goto435_ctx132_x","goto436_ctx132_x","goto437_ctx132_x","goto439_ctx132_x","goto43_x","goto441_ctx132_x","goto442_ctx132_x","goto444_ctx133_x","goto445_ctx133_x","goto448_ctx133_x","goto44_x","goto450_ctx133_x","goto453_ctx133_x","goto456_ctx133_x","goto458_ctx133_x","goto459_ctx133_x","goto45_x","goto460_ctx133_x","goto463_ctx133_x","goto465_ctx133_x","goto468_ctx133_x","goto46_x","goto471_ctx133_x","goto472_ctx133_x","goto473_ctx133_x","goto475_ctx133_x","goto476_ctx133_x","goto479_ctx132_x","goto47_x","goto487_ctx132_x","goto488_ctx132_x","goto489_ctx132_x","goto48_x","goto497_ctx132_x","goto499_ctx132_x","goto49_ctx39_x","goto4_ctx4_x","goto501_ctx132_x","goto502_ctx132_x","goto503_ctx132_x","goto504_ctx132_x","goto508_ctx132_x","goto509_ctx132_x","goto50_ctx50_x","goto510_ctx132_x","goto514_ctx132_x","goto515_ctx132_x","goto519_ctx132_x","goto51_ctx50_x","goto520_ctx132_x","goto524_ctx132_x","goto525_ctx132_x","goto529_ctx132_x","goto52_at1_ctx63_x","goto530_ctx132_x","goto534_ctx132_x","goto535_ctx132_x","goto537_ctx132_x","goto539_ctx132_x","goto540_ctx132_x","goto541_ctx39_x","goto542_at1_ctx39_x","goto543","goto55_ctx55_x","goto55_x","goto63_ctx63_x","goto63_x","goto64_ctx63_x","goto6_ctx6_x","goto71_ctx71_x","goto72_ctx71_x","goto77_ctx72_x","goto78_at1_ctx72_x","goto78_at1_ctx80_x","goto78_at2_ctx72_x","goto78_at2_ctx80_x","goto79_at1_ctx72_x","goto79_at1_ctx80_x","goto7_ctx3_x","goto80_ctx72_x","goto80_ctx80_x","goto81_ctx80_x","goto84_ctx85_x","goto84_x","goto85_ctx85_x","goto85_x","goto86_ctx85_x","goto88_ctx133_x","goto89_ctx132_x","goto8_x","goto90_ctx132_x","goto91_ctx132_x","goto92_ctx132_x","goto93_ctx132_x","goto94_ctx132_x","goto95_ctx132_x","goto96_ctx132_x","goto97_ctx132_x","goto98_ctx132_x","goto99_ctx132_x","goto9_ctx9_x","hash","hash","hash","hash","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","kind","kind","kind_mut","len","lex","lexeme","lexeme","lexeme_mut","merge","new","new","new","next","partial_cmp","partial_cmp","partial_cmp","partial_cmp","pattern0","pattern1","pattern10","pattern11","pattern12","pattern13","pattern14","pattern15","pattern16","pattern17","pattern18","pattern19","pattern2","pattern20","pattern21","pattern22","pattern23","pattern24","pattern3","pattern4","pattern5","pattern6","pattern7","pattern8","pattern9","pretty_print","pretty_print","pretty_print","push","set_cursor","set_kind","set_lexeme","set_span","set_text","set_tokens","set_tokens","span","span","span_mut","start","text","text","text_mut","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_syntax","tokens","tokens","tokens","tokens","tokens_mut","tokens_mut","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Advance","CALLSITE","CALLSITE","CALLSITE","CALLSITE","CALLSITE","CALLSITE","CALLSITE","CALLSITE","CALLSITE","CALLSITE","CALLSITE","CALLSITE","CALLSITE","CALLSITE","CALLSITE","CALLSITE","CALLSITE","Close","DECLARATION_LIST_FIRST","Event","FN_DEF_DECLARATION_SPECIFIERS_FIRST","META","META","META","META","META","META","META","META","META","META","META","META","META","META","META","META","META","MarkClosed","MarkOpened","Open","PARAMETER_TYPE_LIST_FIRST","Parser","ParserCall","STATEMENT_LIST_FIRST","abstract_declarator","add_leaf","additive_expression","advance","advance_with_error","alignment_specifier","and_expression","argument_expression_list","assignment_expression","assignment_operator","at","at_any","at_assignment_operator","at_constant_expression","at_declaration","at_primary_expression","at_statement","at_ts","at_unary_operator","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_tree","call_stack","cast_expression","clone","clone_into","close","compound_statement","conditional_expression","constant_expression","current","current_token","declaration","declaration_list","declaration_specifiers","declarator","direct_abstract_declarator","direct_declarator","eat","enter","enum_specifier","enumerator","enumerator_list","eof","eq","equality_expression","error","events","exclusive_or_expression","expect","expect_any","expression","expression_statement","extern_decl","fmt","fmt","format_call_stack","from","from","from","from","from","fuel","function_def","function_specifier","identifier_list","inclusive_or_expression","index","index","init_declarator","init_declarator_list","initializer","initializer_list","into","into","into","into","into","iteration_statement","jump_statement","labeled_statement","large_parser_prefix","log","logical_and_expression","logical_or_expression","multiplicative_expression","name","new","new","nth","open","open_before","parameter_declaration","parameter_list","parameter_type_list","peek","pointer","pos","postfix_expression","primary_expression","relational_expression","selection_statement","shift_expression","small_parser_prefix","specifier_qualifier_list","statement","statement_list","storage_class_specifier","struct_declaration","struct_declaration_list","struct_declarator","struct_declarator_list","struct_or_union_specifier","to_owned","tokens","trace_exit","translation_unit","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_name","type_qualifier","type_qualifier_list","type_specifier","unary_expression","unary_operator","kind","Directive","Identifier","Preprocessor","Text","Token","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","define_macro","fmt","fmt","from","from","gpp","include_file","include_paths","into","into","macros","new","preprocessor","process","process_file","process_str","to_owned","to_string","tokenize","try_from","try_from","try_into","try_into","type_id","type_id","COMMANDS","ChildFailed","Command","Command","Context","Error","FileError","FromUtf8Error","InvalidCommand","IoError","Line","PipeFailed","Text","TooManyParameters","UnexpectedCommand","allow_exec","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","default","exec","execute","fmt","fmt","fmt","from","from","from","from","from","from","from_macros","from_macros_iter","ignored_by_if","in_stack","inactive_stack","into","into","into","into","is_word_char","macros","name","new","new_exec","process_buf","process_define","process_elifdef","process_else","process_endif","process_endin","process_exec","process_file","process_ifdef","process_in","process_include","process_line","process_str","process_undef","provide","replace_next_macro","requires_exec","shell","source","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","used_if","command","command","command_name","error","filename","line","status","EMPTY","TokenSet","borrow","borrow_mut","clone","clone_into","complement","contains","count","difference","eq","fmt","from","from","hash","insert","intersection","into","is_disjoint","is_empty","is_singleton","is_subset","is_superset","len","mask","merge","new","remove","symmetric_difference","take","to_owned","toggle","toggle_kind","try_from","try_into","type_id","union"],"q":["rcc","","","","","","","","","","","","","","","","","","","","","","","","","","rcc::ast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rcc::cstrcc::lexerrcc::parserrcc::parser::Event","rcc::preprocessor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rcc::preprocessor::gpp","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rcc::preprocessor::gpp::Error","","","","","","","rcc::token_set","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Keywords (e.g. BREAK, IN, LET, LOOP, etc.)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Nodes (e.g. FILE, MODULE, FUNCTION, etc.)","","","","","","","","","Literals (e.g. IDENTIFIER, INT, FLOAT, STRING, BYTES)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Punctuation (e.g. DOT, COMMA, SEMICOLON, etc.)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Tokens (e.g. WHITESPACE, COMMENT, NEWLINE)","","","","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a builder for building <code>Token</code>. On the builder, call …","Create a builder for building <code>TokenSink</code>. On the builder, …","Create a builder for building <code>TokenStream</code>. On the builder, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchangedalls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert a given <code>TokenKind</code> to a <code>SyntaxKind</code>. This is used to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Checks if the current token is in contained within the …","","","","","","","","","","","","","","","","","","","","","Returns the <code>TokenKind</code> of the current token or <strong>EOF</strong> if the …","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Parses an <strong>iteration statement</strong> as per the <strong>C grammar</strong>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<strong>Yacc:</strong>","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","gpp is a Generic PreProcessor written in Rust.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","The child process for an #exec exited with a nonzero …","","","Context of the current processing.","Error enum for parsing errors.","An error occurred in another file.","An error occurred parsing a child’s standard output as …","An unknown command was encountered.","An error with I/O occurred.","","A pipe was unable to be set up to the child.","","Too many parameters were given for a command (for example …","There was an unexpected command; currently only generated …","Whether #exec and #in commands are allowed.","","","","","","","","","","","","Set whther exec commands are allowed.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Create a context from a map of macros.","Create a context from an iterator over tuples.","","The stack of processes that #in is piping to.","Number of layers of inactive if statements.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Map of all currently defined macros.","","Create a new empty context with no macros or inactive …","Create a new empty context with no macros or inactive …","Process a generic BufRead.","","","","","","","Process a file.","","","","Process a string line of input.","Process a multi-line string of text.","","","Finds the next macro name word in the line, and replaces …","","","","","","","","","","","","","","","","","","Whether the current if statement has been accepted.","","","","","","","","An empty <code>TokenSet</code>.","A <em>memory-efficient</em> <strong>bit-set</strong> for <em>managing</em> and <em>querying</em> a …","","","","","Returns the complement of <code>self</code>, which includes all …","Returns <code>true</code> if the <code>TokenSet</code> contains the specified …","Returns the number of <code>SyntaxKind</code>s in <code>self</code>.","Returns a new <code>TokenSet</code> containing the difference of <code>self</code> …","","","Creates a new <code>TokenSet</code> containing the given <code>TokenKind</code>s.","Returns the argument unchanged.","","Inserts the elements of <code>other</code> into <code>self</code>.","Returns a new <code>TokenSet</code> containing the intersection of <code>self</code> …","Calls <code>U::from(self)</code>.","Returns <code>true</code> if <code>self</code> and <code>other</code> have no common elements.","Returns <code>true</code> if the <code>TokenSet</code> is empty.","Returns <code>true</code> if <code>self</code> contains exactly one <code>SyntaxKind</code>.","Returns <code>true</code> if <code>self</code> is a subset of <code>other</code>.","Returns <code>true</code> if <code>self</code> is a superset of <code>other</code>.","","<strong>Mask</strong> for a single <code>SyntaxKind</code> in a <code>TokenSet</code>. This operation …","Example","Creates a new <code>TokenSet</code> containing the given <code>SyntaxKind</code>s.","Removes the elements of <code>other</code> from <code>self</code>.","Returns a new <code>TokenSet</code> containing the symmetric difference …","Removes all elements from <code>self</code> and returns a new <code>TokenSet</code> …","","Toggles the elements of <code>other</code> in <code>self</code>.","Toggles the presence of the specified <code>SyntaxKind</code> in <code>self</code>.","","","","Returns a new <code>TokenSet</code> containing the union of <code>self</code> and …"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,9,4,0,9,0,4,4,4,4,4,4,4,4,3,9,4,3,9,3,4,4,3,3,9,4,3,9,4,3,9,3,3,4,3,4,3,9,4,3,9,4,3,9,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,0,13,13,13,13,13,13,13,13,13,13,13,13,0,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,0,0,0,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,68,69,61,68,68,68,70,68,70,71,72,70,71,68,72,70,71,69,61,69,68,68,68,68,68,68,68,68,68,68,68,68,68,73,68,61,52,52,68,52,51,51,56,68,56,64,64,68,64,68,67,67,68,63,68,68,63,62,73,62,68,66,73,66,68,66,68,59,68,59,57,57,68,59,68,58,58,68,68,59,68,68,68,65,65,68,68,68,60,60,68,68,53,53,54,54,55,55,55,55,71,55,55,55,68,55,68,72,71,68,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,21,21,21,21,21,21,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,0,21,21,21,0,0,0,0,21,21,21,21,21,21,21,51,52,72,73,53,54,55,56,57,58,59,60,69,61,62,63,64,65,66,67,70,71,68,0,0,0,21,51,52,72,73,53,54,55,56,57,58,59,60,69,61,62,63,64,65,66,67,70,71,68,22,23,2,24,21,51,52,72,73,53,54,55,56,57,58,59,60,69,61,62,63,64,65,66,67,70,71,68,22,23,2,24,23,2,24,21,22,23,2,24,21,22,23,2,24,21,22,23,24,24,24,24,22,22,21,22,23,2,24,21,21,22,22,23,23,2,24,21,51,52,72,73,53,54,55,56,57,58,59,60,69,61,62,63,64,65,66,67,70,71,68,22,22,23,2,24,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,22,23,24,21,51,52,72,73,53,54,55,56,57,58,59,60,69,61,62,63,64,65,66,67,70,71,68,22,23,2,24,24,23,23,23,24,21,23,23,23,22,23,2,24,24,21,22,23,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,2,24,24,24,23,23,23,24,2,24,23,23,23,22,24,24,24,21,22,23,2,24,21,22,23,21,2,24,2,24,2,24,21,51,52,72,73,53,54,55,56,57,58,59,60,69,61,62,63,64,65,66,67,70,71,68,22,23,2,24,21,51,52,72,73,53,54,55,56,57,58,59,60,69,61,62,63,64,65,66,67,70,71,68,22,23,2,24,21,51,52,72,73,53,54,55,56,57,58,59,60,69,61,62,63,64,65,66,67,70,71,68,22,23,2,24,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,0,0,0,0,0,29,0,29,29,0,0,0,0,0,29,29,29,29,29,29,29,29,29,32,29,74,33,31,32,29,74,33,31,29,29,0,31,31,29,0,0,0,29,29,0,0,0,0,0,0,29,29,0,0,0,29,31,0,29,29,0,29,29,0,0,0,33,31,0,32,29,74,33,31,29,0,0,0,0,32,31,0,0,0,0,32,29,74,33,31,0,0,0,0,29,0,0,0,74,29,31,29,29,29,0,0,0,29,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,29,29,0,32,29,74,33,31,32,29,74,33,31,32,29,74,33,31,0,0,0,0,0,0,75,34,34,0,34,0,35,34,35,34,34,34,35,34,34,35,34,0,35,35,35,34,35,35,0,35,35,0,34,34,35,35,34,35,34,35,34,0,39,0,76,0,0,39,39,39,39,0,39,76,39,39,38,76,38,39,37,76,38,39,37,37,37,38,38,37,38,39,39,76,38,39,39,39,37,38,38,37,38,38,76,38,39,37,0,38,37,38,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,0,37,0,39,37,39,76,38,39,37,76,38,39,37,76,38,39,37,38,77,78,79,80,80,80,81,30,0,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,0,30,30,30,30,30,30,30,30,30,30,30,30],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],0,[[]],[1,3],[[1,4],3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,[[4,5],[[7,[6]]]],[[4,5],8],[[3,5],8],[[3,5],8],[[9,5],8],[[]],[[]],[[]],[[]],[[]],[[]],0,[[3,10,11]],[[],10],[[],10],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],12],[[],12],[[],12],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[13,13],[[]],[[13,13],14],[[13,13],15],[[13,5],8],[[]],[16,[[17,[13]]]],[1,[[17,[13]]]],[18,[[17,[13]]]],[1,[[17,[13]]]],[19,[[17,[13]]]],[13],[[]],[13,15],[13,15],[13,15],[[13,13],[[17,[14]]]],[13,[[17,[18]]]],[[]],[13,[[17,[19]]]],[[],7],[[],7],[[],12],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[20],[20],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[21,21],[22,22],[23,23],[2,2],[24,24],[[]],[[]],[[]],[[]],[[]],[[21,21],14],[[22,22],14],[[23,23],14],[[24,24],14],[24,11],0,[24,11],[[],22],0,[[21,21],15],[[22,22],15],[[23,23],15],[[2,2],15],[[24,24],15],[[21,5],8],[[21,5],8],[[22,5],8],[[22,5],8],[[23,5],8],[[23,5],8],[[2,5],8],[[24,5],8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[25,[11]]],22],[[]],[[]],[[]],[[24,11],[[17,[23]]]],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[21],[22],[23],[24],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[23,21],0,[23,21],[24,11],[20],[23,26],0,[23,26],[[22,[25,[11]]],22],[[21,26,22],23],[1,2],[1,24],[24,17],[[21,21],[[17,[14]]]],[[22,22],[[17,[14]]]],[[23,23],[[17,[14]]]],[[24,24],[[17,[14]]]],[27,15],[27,15],[27,15],[27,15],[27,15],[27,15],[27,15],[27,15],[27,15],[27,15],[27,15],[27,15],[27,15],[27,15],[27,15],[27,15],[27,15],[27,15],[27,15],[27,15],[27,15],[27,15],[27,15],[27,15],[27,15],[23,26],[2,26],[24,26],[[24,23]],[[24,11],24],[[23,21],23],[[23,26],23],[[23,22],23],[[24,26],24],[[2,24],2],[[24,[28,[23]]],24],[23,22],0,[23,22],0,[24,26],0,[24,26],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[21,13],[2],[24,28],0,0,[2,24],[24,28],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[29],[[29,4]],[29],[29],[[29,1]],[29],[29],[29],[29],[29],[[29,21],15],[29,15],[29,15],[29,15],[29,15],[29,15],[29,15],[[29,30],15],[29,15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[29,3],0,[29],[31,31],[[]],[[29,31,4],32],[29],[29],[29],[29,21],[29,23],[29],[29],[29],[29],[29],[29],[[29,21],15],[[29,4]],[29],[29],[29],[29,15],[[31,31],15],[29],[[29,1]],0,[29],[[29,21]],[29],[29],[29],[29],[[33,5],8],[[31,5],8],[[],26],[[]],[[]],[[]],[[]],[[]],0,[29],[29],[29],[29],0,0,[29],[29],[29],[29],[[]],[[]],[[]],[[]],[[]],[29],[29],[29],[[],26],[[29,3]],[29],[29],[29],0,[24,29],[11,31],[[29,11],21],[29,31],[[29,32],31],[29],[29],[29],[29,[[17,[23]]]],[29],0,[29],[29],[29],[29],[29],[[],26],[29],[29],[29],[29],[29],[29],[29],[29],[29],[[]],0,[29],[29],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],12],[[],12],[[],12],[[],12],[[],12],[29],[29],[29],[29],[29],[29],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[34,34],[[]],[[35,1,1]],[[34,5],8],[[34,5],[[7,[6]]]],[[]],[[]],0,[[35,1],[[36,[10]]]],0,[[]],[[]],0,[[],35],[[]],[[35,[28,[34]]],[[28,[10]]]],[[35,1],[[36,[10]]]],[[1,35],[[36,[10]]]],[[]],[[],10],[[35,1],[[28,[34]]]],[[],7],[[],7],[[],7],[[],7],[[],12],[[],12],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[37,37],[[]],[[],38],[[38,15],38],0,[[38,5],8],[[39,5],8],[[39,5],8],[[]],[[]],[[]],[40,39],[41,39],[[]],[[[43,[[42,[10,10]]]]],38],[44,38],0,0,0,[[]],[[]],[[]],[[]],[16,15],0,0,[[],38],[[],38],[[45,1,38],[[7,[10,39]]]],[[1,38],[[7,[10,39]]]],[[1,38,15],[[7,[10,39]]]],[[1,38],[[7,[10,39]]]],[[1,38],[[7,[10,39]]]],[[1,38],[[7,[10,39]]]],[[1,38],[[7,[10,39]]]],[[1,38],[[7,[10,39]]]],[[1,38,15],[[7,[10,39]]]],[[1,38],[[7,[10,39]]]],[[1,38],[[7,[10,39]]]],[[1,38],[[7,[10,39]]]],[[1,38],[[7,[10,39]]]],[[1,38],[[7,[10,39]]]],[46],[[1,42],[[17,[10]]]],0,[1,47],[39,[[17,[48]]]],[[]],[[],10],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],12],[[],12],[[],12],[[],12],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[30,30],[[]],[30,30],[[30,21],15],[30,49],[[30,30],30],[[30,30],15],[[30,5],8],[[[28,[21]]],30],[[]],[30],[[30,30]],[[30,30],30],[[]],[[30,30],15],[30,15],[30,15],[[30,30],15],[[30,30],15],[30,11],[13,50],[[30,21]],[[],30],[[30,30]],[[30,30],30],[30,30],[[]],[[30,30]],[[30,21]],[[],7],[[],7],[[],12],[[30,30],30]],"p":[[15,"str"],[3,"TokenSink"],[3,"Tree"],[4,"TreeKind"],[3,"Formatter"],[3,"Error"],[4,"Result"],[6,"Result"],[4,"Child"],[3,"String"],[15,"usize"],[3,"TypeId"],[4,"SyntaxKind"],[4,"Ordering"],[15,"bool"],[15,"char"],[4,"Option"],[15,"i64"],[15,"u64"],[3,"Lexer"],[4,"TokenKind"],[3,"Span"],[3,"Token"],[3,"TokenStream"],[3,"Range"],[6,"String"],[15,"u8"],[3,"Vec"],[3,"Parser"],[3,"TokenSet"],[3,"MarkOpened"],[3,"MarkClosed"],[4,"Event"],[4,"Token"],[3,"Preprocessor"],[6,"Result"],[3,"Command"],[3,"Context"],[4,"Error"],[3,"Error"],[3,"FromUtf8Error"],[3,"HashMap"],[8,"Into"],[8,"IntoIterator"],[8,"BufRead"],[3,"Demand"],[3,"Command"],[8,"Error"],[15,"u32"],[15,"u128"],[4,"Jump"],[4,"Jump"],[4,"Jump"],[4,"Jump"],[4,"Jump"],[4,"Jump"],[4,"Jump"],[4,"Jump"],[4,"Jump"],[4,"Jump"],[4,"Jump"],[4,"Jump"],[4,"Jump"],[4,"Jump"],[4,"Jump"],[4,"Jump"],[4,"Jump"],[4,"Jump"],[4,"Jump"],[4,"Jump"],[4,"Jump"],[4,"Jump"],[4,"Jump"],[3,"ParserCall"],[13,"Open"],[4,"Line"],[13,"TooManyParameters"],[13,"UnexpectedCommand"],[13,"InvalidCommand"],[13,"FileError"],[13,"ChildFailed"]]},\
"resilient_ll":{"doc":"","t":[13,13,13,13,13,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,4,13,13,13,17,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,3,3,13,13,13,13,13,3,13,13,13,13,17,17,13,13,3,13,13,13,13,3,13,4,3,13,4,13,13,11,11,5,5,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,12,11,5,5,5,5,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,12,5,12,12,11,11,11,11,11,11,11,11,11,11,12,12,5,5,5,11,11,11,11,11,5,5,5,12,11,5,12,5,5,5,12,5,11,11,11,11,12,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,12],"n":["Advance","Arg","ArgList","Arrow","Block","CALLSITE","CALLSITE","CALLSITE","CALLSITE","CALLSITE","CALLSITE","CALLSITE","CALLSITE","CALLSITE","CALLSITE","CALLSITE","CALLSITE","CALLSITE","CALLSITE","CALLSITE","CALLSITE","Child","Close","Colon","Comma","EXPR_FIRST","Eof","Eq","ErrorToken","ErrorTree","Event","ExprBinary","ExprCall","ExprLiteral","ExprName","ExprParen","FalseKeyword","File","Fn","FnKeyword","Int","LCurly","LParen","LetKeyword","META","META","META","META","META","META","META","META","META","META","META","META","META","META","META","META","MarkClosed","MarkOpened","Minus","Name","Open","Param","ParamList","Parser","Plus","RCurly","RParen","ReturnKeyword","STMT_EXPECTED","STMT_RECOVERY","Semi","Slash","Span","Star","StmtExpr","StmtLet","StmtReturn","Token","Token","TokenKind","Tree","Tree","TreeKind","TrueKeyword","TypeExpr","advance","advance_with_error","arg","arg_list","at","at_any","block","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_tree","children","clone","clone","clone_into","clone_into","close","eat","end","eof","eq","eq","events","expect","expr","expr_delimited","expr_rec","file","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format_to","from","from","from","from","from","from","from","from","from","from","fuel","func","index","index","into","into","into","into","into","into","into","into","into","into","kind","kind","lex","main","name_char","new","new","nth","open","open_before","param","param_list","parse","pos","print","right_binds_tighter","start","stmt_expr","stmt_let","stmt_return","text","tightness","to_owned","to_owned","to_string","to_string","tokens","trim","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_expr","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","kind"],"q":["resilient_llresilient_ll::Event"],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[14,7,7,3,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,3,3,0,3,3,3,7,0,7,7,7,7,7,3,7,7,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,14,7,7,0,3,3,3,3,0,0,3,3,0,3,7,7,7,0,23,0,0,23,0,3,7,1,1,0,0,1,1,0,5,23,8,1,3,7,12,13,14,6,5,23,8,1,3,7,12,13,14,6,1,5,3,6,3,6,1,1,13,1,3,6,1,1,0,0,0,0,5,3,3,7,12,12,13,14,6,0,5,23,8,1,3,7,12,13,14,6,1,0,8,6,5,23,8,1,3,7,12,13,14,6,5,12,0,0,0,1,6,1,1,1,0,0,0,1,5,0,13,0,0,0,12,0,3,6,3,12,1,0,5,23,8,1,3,7,12,13,14,6,5,23,8,1,3,7,12,13,14,6,0,5,23,8,1,3,7,12,13,14,6,24],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[[1,2]],[1],[1],[[1,3],4],[1,4],[1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,5],0,[3,3],[6,6],[[]],[[]],[[1,6,7],8],[[1,3],4],0,[1,4],[[3,3],4],[[6,6],4],0,[[1,3]],[1],[1,[[9,[8]]]],[[1,3]],[1],[[5,10],11],[[3,10],11],[[3,10],11],[[7,10],11],[[12,10],11],[[12,10],11],[[13,10],11],[[14,10],11],[[6,10],11],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[1],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[2,[[15,[12]]]],[[]],[16,4],[[[15,[12]]],1],[17,6],[[1,17],3],[1,6],[[1,8],6],[1],[1],[2,5],0,[[5,18,17]],[[3,3],4],0,[1],[1],[1],0,[3,[[9,[17]]]],[[]],[[]],[[],19],[[],19],0,[[2,20],[[9,[2]]]],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[1],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],0],"p":[[3,"Parser"],[15,"str"],[4,"TokenKind"],[15,"bool"],[3,"Tree"],[3,"MarkOpened"],[4,"TreeKind"],[3,"MarkClosed"],[4,"Option"],[3,"Formatter"],[6,"Result"],[3,"Token"],[3,"Span"],[4,"Event"],[3,"Vec"],[15,"char"],[15,"usize"],[6,"String"],[3,"String"],[8,"Fn"],[4,"Result"],[3,"TypeId"],[4,"Child"],[13,"Open"]]}\
}',
);
if (typeof window !== "undefined" && window.initSearch) {
    window.initSearch(searchIndex);
}
if (typeof exports !== "undefined") {
    exports.searchIndex = searchIndex;
}
